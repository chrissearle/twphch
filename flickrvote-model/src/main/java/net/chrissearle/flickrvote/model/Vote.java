/*
 * Copyright 2010 Chris Searle
 *
 *    Licensed under the Apache License, Version 2.0 (the "License");
 *    you may not use this file except in compliance with the License.
 *    You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 *    Unless required by applicable law or agreed to in writing, software
 *    distributed under the License is distributed on an "AS IS" BASIS,
 *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *    See the License for the specific language governing permissions and
 *    limitations under the License.
 */

package net.chrissearle.flickrvote.model;

import javax.persistence.*;

/**
 * Class Vote represents one vote by one photographer for one image. All votes are removed at end of voting.
 *
 * @author chris
 */
@Entity
@Table(name = "votes")
public class Vote {
    /**
     * Autogenerated primary key
     */
    @Id
    @Column(updatable = false)
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    /**
     * The photographer that cast this vote
     */
    @ManyToOne
    private Photographer photographer;

    /**
     * The image that this is a vote for
     */
    @ManyToOne
    private Image image;

    /**
     * Version is an internal field used by JPA for preventing issues with concurrent updates.
     */
    @Version
    private Long version;

    /**
     * Method getPhotographer returns the photographer of this Vote object.
     * <p/>
     * The photographer that cast this vote
     *
     * @return the photographer (type Photographer) of this Vote object.
     */
    public Photographer getPhotographer() {
        return photographer;
    }

    /**
     * Method setPhotographer sets the photographer of this Vote object.
     * <p/>
     * The photographer that cast this vote
     *
     * @param photographer the photographer of this Vote object.
     */
    public void setPhotographer(Photographer photographer) {
        this.photographer = photographer;
    }

    /**
     * Method getImage returns the image of this Vote object.
     * <p/>
     * The image that this is a vote for
     *
     * @return the image (type Image) of this Vote object.
     */
    public Image getImage() {
        return image;
    }

    /**
     * Method setImage sets the image of this Vote object.
     * <p/>
     * The image that this is a vote for
     *
     * @param image the image of this Vote object.
     */
    public void setImage(Image image) {
        this.image = image;
    }

    /**
     * Method getVersion returns the version of this Vote object.
     * <p/>
     * Version is an internal field used by JPA for preventing issues with concurrent updates.
     *
     * @return the version (type Long) of this Vote object.
     */
    public Long getVersion() {
        return version;
    }

    /**
     * Method setVersion sets the version of this Vote object.
     * <p/>
     * Version is an internal field used by JPA for preventing issues with concurrent updates.
     *
     * @param version the version of this Vote object.
     */
    public void setVersion(Long version) {
        this.version = version;
    }
}
